{"version":3,"sources":["assets/logo-with-text.png","Components/Common/Footer/Footer.js","Components/Common/Header/Header.js","Components/Technologies/Python/data/InstallingPython.js","Components/Technologies/Python/data/BasicSyntax.js","Components/Technologies/Python/data/IfElseStatement.js","Components/Technologies/Python/data/ForStatement.js","Components/Technologies/Python/data/ConditionalStatements.js","Components/Technologies/Python/data/ForLoop.js","Components/Technologies/Python/data/WhileLoop.js","Components/Technologies/Python/Python.js","Components/Technologies/Java/data/Interfaces.js","Components/Technologies/Java/data/Encapsulation.js","Components/Technologies/Java/data/EnvironmentSetup.js","Components/Technologies/Java/Java.js","Components/Technologies/CSharp/CSharp.js","Components/Technologies/JavaScript/data/NodeJS.js","Components/Technologies/JavaScript/data/Functions.js","Components/Technologies/JavaScript/data/ConditionalStatements.js","Components/Technologies/JavaScript/data/Loops.js","Components/Technologies/JavaScript/JavaScript.js","Components/Common/Navigation/Navigation.js","App.js","index.js"],"names":["module","exports","Footer","faFacebookIcon","icon","faFacebookF","faTwitterIcon","faTwitter","faInstagramIcon","faInstagram","faYoutubeIcon","faYoutube","className","to","Header","arrowLeftIcon","faArrowLeft","href","target","src","logo","InstallingPython","class","BasicSyntax","IfElseStatement","ForStatement","ConditionalStatements","height","width","scrolling","frameborder","allowtransparency","allowfullscreen","sandbox","ForLoop","WhileLoop","Python","vertical","onChange","tabId","console","log","tabFor","path","component","Component","Interfaces","Encapsulation","EnvironmentSetup","Java","CSharp","Node","Functions","Loops","JavaScript","NodeJS","Navigation","faHomeIcon","faHome","faSearchIcon","faSearch","activeClassName","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.663f7ffa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-with-text.49330e6b.png\";","import React from \"react\";\r\nimport \"./Footer.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowCircleUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faFacebookF } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faInstagram } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faYoutube } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nfunction Footer() {\r\n  const faFacebookIcon = <FontAwesomeIcon icon={faFacebookF} />;\r\n  const faTwitterIcon = <FontAwesomeIcon icon={faTwitter} />;\r\n  const faInstagramIcon = <FontAwesomeIcon icon={faInstagram} />;\r\n  const faYoutubeIcon = <FontAwesomeIcon icon={faYoutube} />;\r\n\r\n  return (\r\n    <div className=\"Footer\">\r\n      <div>\r\n        <section>\r\n          <div className=\"footer-section-header\">\r\n            <span>About us</span>\r\n          </div>\r\n          <p>\r\n            SoftUni gives profession and job to thousands of young people by\r\n            modern practical education for software engineers and digital\r\n            skills. SoftUni promotes the “learn by doing” approach for\r\n            developing practical skills through its interactive learning\r\n            platform. Write code instead of reading or watching how to write\r\n            code. Solve real-world problems instead of learning theory. SoftUni\r\n            is not a coding academy, nor university. It provides solid\r\n            fundamental skills, mixed with modern technologies and a lot of\r\n            practice every day for 1-3 years. The final goal is to get\r\n            real-world skills and start a job in the software, IT or digital\r\n            industry.\r\n          </p>\r\n        </section>\r\n        <section>\r\n          <div className=\"footer-section-header\">\r\n            <span>SoftUni</span>\r\n          </div>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"https://softuni.org/\">\r\n                SoftUni Interactive Learning\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"https://judge.softuni.bg/\">SoftUni Judge</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"http://softuni.foundation/\">SoftUni Foundation</Link>\r\n            </li>\r\n          </ul>\r\n        </section>\r\n        <section>\r\n          <div className=\"footer-section-header\">\r\n            <span>Free Books</span>\r\n          </div>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"https://csharp-book.softuni.org/\">\r\n                “Programming Basics with C#” Free Video Book\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"https://introprogramming.info/english-intro-csharp-book/\">\r\n                “Fundamentals of Computer Programming with C#” Free Book\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </section>\r\n        <section>\r\n          <div className=\"footer-section-header\">\r\n            <span>Partners</span>\r\n          </div>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"https://nakov.com\">Nakov.com</Link>\r\n            </li>\r\n          </ul>\r\n        </section>\r\n      </div>\r\n\r\n      <div>\r\n        <section>\r\n          Copyright © 2019 SoftUni Wiki: Learn Programming. All rights reserved.\r\n        </section>\r\n\r\n        <section className=\"social-icons\">\r\n          <Link to=\"https://www.facebook.com/softuni.org\">\r\n            {faFacebookIcon}\r\n          </Link>\r\n          <Link to=\"https://twitter.com/SoftUni1\">{faTwitterIcon}</Link>\r\n          <Link to=\"https://www.instagram.com/softuni_org/\">\r\n            {faInstagramIcon}\r\n          </Link>\r\n          <Link to=\"https://www.youtube.com/channel/UCqvOk8tYzfRS-eDy4vs3UyA\">\r\n            {faYoutubeIcon}\r\n          </Link>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Header.scss\";\r\nimport logo from \"../../../assets/logo-with-text.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faFacebookF } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faInstagram } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faYoutube } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nfunction Header() {\r\n  const arrowLeftIcon = <FontAwesomeIcon icon={faArrowLeft} />;\r\n  const faFacebookIcon = <FontAwesomeIcon icon={faFacebookF} />;\r\n  const faTwitterIcon = <FontAwesomeIcon icon={faTwitter} />;\r\n  const faInstagramIcon = <FontAwesomeIcon icon={faInstagram} />;\r\n  const faYoutubeIcon = <FontAwesomeIcon icon={faYoutube} />;\r\n\r\n  return (\r\n    <div className=\"Header\">\r\n      <section>\r\n        <button>\r\n          <a href=\"https://www.softuni.bg\" target=\"_blank\">\r\n            <span>{arrowLeftIcon}</span>Back to SoftUni\r\n          </a>\r\n        </button>\r\n\r\n        <section className=\"social-icons\">\r\n          <Link to=\"https://www.facebook.com/softuni.org\">\r\n            {faFacebookIcon}\r\n          </Link>\r\n          <Link to=\"https://twitter.com/SoftUni1\">{faTwitterIcon}</Link>\r\n          <Link to=\"https://www.instagram.com/softuni_org/\">\r\n            {faInstagramIcon}\r\n          </Link>\r\n          <Link to=\"https://www.youtube.com/channel/UCqvOk8tYzfRS-eDy4vs3UyA\">\r\n            {faYoutubeIcon}\r\n          </Link>\r\n        </section>\r\n      </section>\r\n      <section>\r\n        <img src={logo}></img>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n// import \"../Technology.scss\";\r\n\r\n\r\nfunction InstallingPython() {\r\n    return (\r\n        <div>\r\n            <h1>Installing Python</h1>\r\n            <li>Go to <a href=\"https://python.org\" class=\"link\">python.org</a> and click the download link depending on your operating system</li>\r\n            <li>You can code and execute python directly in the command prompt by typing <b>\"python\"</b> or <b>\"py\"</b></li>\r\n            <h1>Installing PyCharm</h1>\r\n            <ul>\r\n                <li>You can also code in Python using <strong>IDE</strong> (for example: <strong>PyCharm</strong>)</li>\r\n                <li>You can download PyCharm from <a href=\"https://www.jetbrains.com/pycharm/download\" className=\"link\">here</a></li>      \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InstallingPython;","import React from \"react\";\r\n// import \"../Technology.scss\";\r\n\r\nfunction BasicSyntax() {\r\n    return (\r\n        <div>\r\n            <h1>Basic Syntax</h1>\r\n            <ul>\r\n            <li><strong><i>Variables</i></strong> – they are way to <strong>store information</strong> and are characterized by <strong>name, type and value</strong></li>\r\n            <li><strong><i>Data types</i></strong> – variables are used to <strong>hold different data types</strong></li>\r\n            <ul>\r\n                    <li><b>int</b> - integer number : 1, 2, 3, 4 …</li>\r\n                    <li><b>float</b> - real number : 0.5 , 3.14, -0.5 …</li>\r\n                    <li><b>str</b> - string and chars : \"a\", \"Hello\", …</li>\r\n                    <li><b>bool</b> - boolean: True, False</li>\r\n            </ul>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BasicSyntax;","import React from \"react\";\r\n// import \"../Technology.scss\";\r\n\r\nfunction IfElseStatement() {\r\n    return (\r\n        <div>\r\n            <h1>If-Else Statement</h1>\r\n            <h2><u>Python Conditions</u></h2>\r\n            <p>Python supports the usual logical conditions from mathematics:</p>\r\n            <li>Equals: <strong>a == b</strong></li>\r\n            <li>Not Equals: <strong>a != b</strong></li>\r\n            <li>Less than: <strong>a &lt; b</strong></li>\r\n            <li>Less than or equal to:  <strong>a &lt;= b</strong></li>\r\n            <li>Greater than:  <strong>a &gt; b</strong></li>\r\n            <li>Greater than or equal to:  <strong>a &gt;= b</strong></li>\r\n            <p>These conditions can be used in several ways, most commonly in \"if statements\" and loops.</p>\r\n            <p>An \"if statement\" is written by using the if keyword.</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                    <p>a = 33</p>\r\n                    <p>b = 200</p>\r\n                    <p>if b > a:</p>\r\n                    <p>&emsp;print(\"b is grater than a\")</p>\r\n                </code>\r\n            </div>\r\n            <p>In this example we use two variables, <b>a</b> and <b>b</b>, which are used as part of the if statement to test whether b is greater than a. As a is <b>33</b>, and <b>b</b> is <b>200</b>, we know that <b>200</b> is greater than <b>33</b>, and so we print to screen that <b>\"b is greater than a\"</b>.</p>\r\n            <h2><u>Indentation</u></h2>\r\n            <p>Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                    <p>a = 33</p>\r\n                    <p>b = 200</p>\r\n                    <p>if b > a:</p>\r\n                    <p>&emsp;print(\"b is greater than a\") # you will get an error</p>\r\n                </code>\r\n            </div>\r\n            <h2><u>Elif</u></h2>\r\n            <p>The <b>elif</b> keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                <p>a = 33</p>\r\n                <p>b = 33</p>\r\n                <p>if b > a:</p>\r\n                <p>&emsp;print(\"b is greater than a\")</p>\r\n                <p>elif a == b:</p>\r\n                <p>&emsp;print(\"a and b are equal\")</p>\r\n                </code>\r\n            </div>\r\n            <p>In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\".</p>\r\n            <h2><u>Else</u></h2>\r\n            <p>The else keyword catches anything which isn't caught by the preceding conditions.</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                <p>a = 200</p>\r\n                <p>b = 33</p>\r\n                <p>if b > a:</p>\r\n                <p>&emsp;print(\"b is greater than a\")</p>\r\n                <p>elif a == b:</p>\r\n                <p>&emsp;print(\"a and b are equal\")</p>\r\n                <p>else:</p>\r\n                <p>&emsp;print(\"a is greater than b\")</p>\r\n                </code>\r\n            </div>\r\n            <p>In this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\".</p>\r\n            <p>You can also have an <b>else</b> without the <b>elif</b>:</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                <p>a = 200</p>\r\n                <p>b = 33</p>\r\n                <p>if b > a:</p>\r\n                <p>&emsp;print(\"b is greater than a\")</p>\r\n                <p>else:</p>\r\n                <p>&emsp;print(\"b is not greater than a\")</p>\r\n                </code>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IfElseStatement;","import React from \"react\";\r\nimport { exportNamespaceSpecifier } from \"@babel/types\";\r\n// import \"../Technology.scss\";\r\n\r\nfunction ForStatement() {\r\n    return (\r\n        <div>\r\n            <h1>For Statement</h1>\r\n            <p>A <b>for</b> loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</p>\r\n            <p>This is less like the <b>for</b> keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.</p>\r\n            <p>With the <b>for</b> loop we can execute a set of statements, once for each item in a list, tuple, set etc.</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                    <p>fruits = [\"apple\", \"banana\", \"cherry\"]</p>\r\n                    <p>for x in fruits:</p>\r\n                    <p>&emsp;print(x)</p>\r\n                </code>\r\n            </div>\r\n            <p>The <b>for</b> loop does not require an indexing variable to set beforehand.</p>\r\n            <h2><u>Looping through a string</u></h2>\r\n            <p>Even strings are <i>iterable</i> objects, they contain a sequence of characters:</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                    <p>for x in \"banana\":</p>\r\n                    <p>&esmp;print(x)</p>\r\n                </code>\r\n            </div>\r\n            <h2><u>The break statement</u></h2>\r\n            <p>With the <b>break</b> statement we can stop the loop before it has looped through all the items:</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                    <p>fruits = [\"apple\", \"banana\", \"cherry\"]</p>\r\n                    <p>for x in fruits:</p>\r\n                    <p>&emsp;print(x)</p>\r\n                    <p>&emsp;if x == \"banana\":</p>\r\n                    <p>&emsp;&emsp;break</p>\r\n                </code>\r\n            </div>\r\n            <br></br>\r\n            <div className='code-block'>\r\n                <code>\r\n                    <p>fruits = [\"apple\", \"banana\", \"cherry\"]</p>\r\n                    <p>for x in fruits:</p>\r\n                    <p>&emsp;print(x)</p>\r\n                    <p>&emsp;if x == \"banana\":</p>\r\n                    <p>&emsp;&emsp;break</p>\r\n                    <p>&emsp;print(x)</p>\r\n                </code>\r\n            </div>\r\n            <h2><u>The continue statement</u></h2>\r\n            <p>With the <b>continue</b> statement we can stop the current iteration of the loop, and continue with the next:</p>\r\n            <div className='code-block'>\r\n                <code>\r\n                    <p>fruits = [\"apple\", \"banana\", \"cherry\"]</p>\r\n                    <p>for x in fruits:</p>\r\n                    <p>&emsp;if x == \"banana\"</p>\r\n                    <p>&emsp;&emsp;continue</p>\r\n                    <p>&emsp;print(x)</p>\r\n                </code>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForStatement;","import React from \"react\";\r\n// import \"../Technology.scss\";\r\n\r\nfunction ConditionalStatements() {\r\n    return (\r\n        <div>\r\n            <h1>The if-Statement</h1>\r\n            <ul>\r\n                <li>An \"if statement\" is written by using the <b>if</b> keyword.</li>\r\n                <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/SwiftFortunateGraphs?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n                <li>Python supports the usual logical conditions from mathematics:</li>\r\n                <ul>\r\n                    <li>Equals: a == b</li>\r\n                    <li>Not Equals: a != b</li>\r\n                    <li>Less than: a &lt; b</li>\r\n                    <li>Less than or equal to: a &lt;= b</li>\r\n                    <li>Greater than: a &gt; b</li>\r\n                    <li>Greater than or equal to: a &gt;= b</li>\r\n                </ul>\r\n            </ul>\r\n            <h1>Indentation</h1>\r\n            <ul>\r\n                <li>Python relies on indentation, using <b>whitespace</b>, to define scope in the code.</li>\r\n                <li>Other programming languages often use <b>curly-brackets</b> for this purpose.</li>\r\n                <li>If statement, without indentation (will raise an error)</li>\r\n            </ul>\r\n            <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/PhonyMuddyInstitution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n            <h1>The elif-Statement</h1>\r\n            <li>The <b>elif</b> keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".</li>\r\n            <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/DifficultSaneBackups?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n            <h1>The else Statement</h1>\r\n            <li>The <b>else</b> keyword catches anything which isn't caught by the preceding conditions.</li>\r\n            <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/JauntyDefiantTree?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n            <h1>\"And\" or \"Or\"</h1>\r\n            <ul>\r\n                <li>\r\n                The <b>and</b> keyword is a logical operator, and is used to <b>combine</b> conditional statements:\r\n                <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/ViolentUltimateSystemsoftware?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n                </li>\r\n                <li>The <b>or</b> keyword is a logical operator, and is used to combine conditional statements:</li>\r\n                <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/HideousLikableType?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConditionalStatements;","import React from \"react\";\r\n// import \"../Technology.scss\";\r\n\r\nfunction ForLoop() {\r\n    return (\r\n        <div>\r\n            <h1>For Loop</h1>\r\n            <li>A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</li>\r\n            <li>The for loop does not require an indexing variable to set beforehand.</li>\r\n            <h1>The range function</h1>\r\n            <li>To loop through a set of code a specified number of times, we can use the <b><i>range()</i></b> function</li>\r\n            <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/BitterPushySale?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n            <h1>The break Statement</h1>\r\n            <li>The <b>break</b> statement <b>stops</b> the loop before it has looped through all the items:</li>\r\n            <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/DefiniteCylindricalObjectdatabase?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n            <h1>The continue Statement</h1>\r\n            <li>The continue statement skips the current iteration of the loop, and continue with the next:</li>\r\n            <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/LinedWildElement?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForLoop;","import React from \"react\";\r\n// import \"../Technology.scss\";\r\n\r\nfunction WhileLoop() {\r\n    return (\r\n        <div>\r\n            <h1>While Loop</h1>\r\n            <li>With the while loop we can execute a set of statements as long as a condition is true.</li>\r\n            <iframe height=\"400px\" width=\"90%\" src=\"https://repl.it/repls/NotableWebbedBases?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\r\n            <li><b><i>Note</i></b>: remember to increment i, or else the loop will continue forever.</li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WhileLoop;","import React, { Component } from \"react\";\r\nimport \"../Technology.scss\";\r\nimport { NavLink, Switch, Route } from 'react-router-dom';\r\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\r\n\r\nimport InstallingPython from './data/InstallingPython';\r\nimport BasicSyntax from './data/BasicSyntax';\r\nimport IfElseStatement from './data/IfElseStatement';\r\nimport ForStatement from './data/ForStatement';\r\nimport ConditionalStatements from './data/ConditionalStatements';\r\nimport ForLoop from './data/ForLoop';\r\nimport WhileLoop from './data/WhileLoop';\r\n\r\nclass Python extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Python technology-container\">\r\n        <Tabs\r\n          vertical\r\n          onChange={tabId => {\r\n            console.log(tabId);\r\n          }}\r\n        >\r\n          <TabList>\r\n            <Tab tabFor=\"BasicSyntaxConditionalStatementsAndLoops\">\r\n              <NavLink to='/python'>\r\n                <h3>Basic Syntax, Conditional <br/> Statements and Loops</h3>\r\n              </NavLink>\r\n            </Tab>\r\n            <Tab tabFor=\"DataTypesAndVariables\">\r\n              <NavLink to='/python'>\r\n                <h3>Data Types and Variables</h3>\r\n              </NavLink>\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanel tabId=\"BasicSyntaxConditionalStatementsAndLoops\">\r\n            <Switch>\r\n              <Route path=\"/python/installing_python\" component={InstallingPython}></Route>\r\n              <Route path=\"/python/basic_syntax\" component={BasicSyntax}></Route>\r\n              <Route path=\"/python/conditional_statements\" component={ConditionalStatements}></Route>\r\n              <Route path=\"/python/for_loop\" component={ForLoop}></Route>\r\n              <Route path=\"/python/while_loop\" component={WhileLoop}></Route>\r\n              <Route path=\"/python\">\r\n                <NavLink to='/python/installing_python'>\r\n                  <h2>Installing Python</h2>\r\n                </NavLink>\r\n                <NavLink to='/python/basic_syntax'>\r\n                  <h2>Basic Syntax</h2>\r\n                </NavLink>\r\n                <NavLink to='/python/conditional_statements'>\r\n                  <h2>Conditional Statements</h2>\r\n                </NavLink>\r\n                <NavLink to='/python/for_loop'>\r\n                  <h2>For Loop</h2>\r\n                </NavLink>\r\n                <NavLink to='/python/while_loop'>\r\n                  <h2>While Loop</h2>\r\n                </NavLink>\r\n              </Route>\r\n            </Switch>\r\n          </TabPanel>\r\n          <TabPanel tabId=\"DataTypesAndVariables\">\r\n            <Switch>\r\n              <Route path=\"/python/if_else\" component={IfElseStatement}></Route>\r\n              <Route path=\"/python/for\" component={ForStatement}></Route>\r\n              <Route path=\"/python\">\r\n                <NavLink to='/python/if_else'>\r\n                  <h2>If-Else Statement</h2>\r\n                </NavLink>\r\n                <NavLink to='/python/for'>\r\n                  <h2>For Statement</h2>\r\n                </NavLink>\r\n              </Route>\r\n            </Switch>\r\n          </TabPanel>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Python;\r\n","import React from \"react\";\r\n// import \"../Technology.scss\";\r\n\r\nfunction Interfaces() {\r\n    return (\r\n        <div>\r\n            <article>\r\n                <h1>Interfaces</h1>\r\n                <p>An interface is a reference type in Java. It is similar to class. It is a collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface.</p>\r\n                <p>Along with abstract methods, an interface may also contain constants, default methods, static methods, and nested types. Method bodies exist only for default methods and static methods.</p>\r\n                <p>Writing an interface is similar to writing a class. But a class describes the attributes and behaviors of an object. And an interface contains behaviors that a class implements.</p>\r\n                <p>Unless the class that implements the interface is abstract, all the methods of the interface need to be defined in the class.</p>\r\n                <h4>An interface is similar to a class in the following ways :</h4>\r\n                <ul>\r\n                    <li><p>An interface can contain any number of methods.</p></li>\r\n                    <li><p>An interface is written in a file with a <b>.java</b> extension, with the name of the interface matching the name of the file.</p></li>\r\n                    <li><p>The byte code of an interface appears in a <b>.class</b> file.</p></li>\r\n                    <li><p>Interfaces appear in packages, and their corresponding bytecode file must be in a directory structure that matches the package name.</p></li>\r\n                </ul>\r\n\r\n                <h4>However, an interface is different from a class in several ways, including :</h4>\r\n                <ul>\r\n                    <li><p>You cannot instantiate an interface.</p></li>\r\n                    <li><p>An interface does not contain any constructors.</p></li>\r\n                    <li><p>All of the methods in an interface are abstract.</p></li>\r\n                    <li><p>An interface cannot contain instance fields. The only fields that can appear in an interface must be declared both static and final.</p></li>\r\n                    <li><p>An interface is not extended by a class; it is implemented by a class.</p></li>\r\n                    <li><p>An interface can extend multiple interfaces.</p></li>\r\n                </ul>\r\n                <h2>Declaring Interfaces</h2>\r\n                <p>The <b>interface</b> keyword is used to declare an interface. Here is a simple example to declare an interface −</p>\r\n                <div class=\"code-block\">\r\n                <pre>\r\n                    <code>\r\n                        <span class=\"com\">/* File name : NameOfInterface.java */</span> <span class=\"pln\">\r\n                        </span>\r\n                        <p><b>import</b> java.lang.*;</p>\r\n                        <p class=\"comment\">// Any number of import statements</p>\r\n                        <p>&nbsp;</p>\r\n                        <p><b>public</b> <b>interface</b> NameOfInterface &#123;</p>\r\n                        <p class=\"comment\">&#09;// Any number of final, static fields</p>\r\n                        <p class=\"comment\">&#09;// Any number of abstract method declarations\\</p>\r\n                        <p>&#125;</p>\r\n                    </code>\r\n                </pre>\r\n                </div>\r\n           \r\n            </article>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Interfaces","import React from \"react\";\r\n\r\n\r\nfunction Encapsulation(){\r\n    return (\r\n        <div>\r\n            <article>\r\n                <h1>Encapsulation</h1>\r\n                <p>Encapsulation is one of the four fundamental OOP concepts. The other three are inheritance, polymorphism, and abstraction.</p>\r\n                <p>Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class. Therefore, it is also known as <b>data hiding.</b></p>\r\n                <h4>To achieve encapsulation in Java :</h4>\r\n                <ul>\r\n                    <li><p>Declare the variables of a class as private.</p></li>\r\n                    <li><p>Provide public setter and getter methods to modify and view the variables values.</p></li>\r\n                </ul>\r\n                <h2>Example</h2>\r\n                <p>Following is an example that demonstrates how to achieve Encapsulation in Java </p>\r\n                <div class=\"code-block\">\r\n                <pre>\r\n                    <code>\r\n                        <span class=\"comment\">/* File name : Person.java */</span> \r\n                        <p><b>public</b> <b>class</b> Person &#123;</p>\r\n                        <p><b>&#09;&#09;public</b> <span class=\"variable-type\">String</span> name;</p>\r\n                        <p><b>&#09;&#09;public</b> <span class=\"variable-type\">String</span> idNum;</p>\r\n                        <p><b>&#09;&#09;public</b> <span class=\"keyword\">int</span> age;</p>\r\n                        <p>&nbsp;</p>\r\n                        <p><b>&#09;public</b> <span class=\"keyword\">int</span> getAge() &#123;</p>\r\n                        <p>&#09; <span class=\"keyword\">return</span> age;</p>\r\n                        <p>&#09;&#125;</p>\r\n                        <p><b>&#09;public</b> <span class=\"variable-type\">String</span> getName() &#123;</p>\r\n                        <p>&#09; <span class=\"keyword\">return</span> name;</p>\r\n                        <p>&#09;&#125;</p>\r\n                        <p><b>&#09;public</b> <span class=\"variable-type\">String</span> getIdNum() &#123;</p>\r\n                        <p>&#09; <span class=\"keyword\">return</span> idNum;</p>\r\n                        <p>&#09;&#125;</p>\r\n                        <p><b>&#09;public</b> <span class=\"variable-type\">String</span> setAge(<span class=\"keyword\">int</span> newAge) &#123;</p>\r\n                        <p>&#09; age = newAge;</p>\r\n                        <p>&#09;&#125;</p>\r\n                        <p><b>&#09;public</b> <span class=\"variable-type\">String</span> setName(<span class=\"variable-type\">String</span> newName) &#123;</p>\r\n                        <p>&#09; name = newName;</p>\r\n                        <p>&#09;&#125;</p>\r\n                        <p><b>&#09;public</b> <span class=\"variable-type\">String</span> setIdNum(<span class=\"variable-type\">String</span> newId) &#123;</p>\r\n                        <p>&#09; idNum = newId;</p>\r\n                        <p>&#09;&#125;</p>\r\n                        <p>&#125;</p>\r\n                    </code>\r\n                </pre>\r\n                </div>\r\n                <p>The public setXXX() and getXXX() methods are the access points of the instance variables of the EncapTest class. Normally, these methods are referred as getters and setters. Therefore, any class that wants to access the variables should access them through these getters and setters.</p>\r\n                <h3>Benefits of Encapsulation</h3>\r\n                <ul>\r\n                    <li><p>The fields of a class can be made read-only or write-only.</p></li>\r\n                    <li><p>A class can have total control over what is stored in its fields.</p></li>\r\n                </ul>\r\n                \r\n\r\n            </article>\r\n        </div>\r\n    )\r\n}\r\nexport default Encapsulation;","import React from \"react\";\r\n\r\n\r\nfunction EnvironmentSetup() {\r\n    return (\r\n        <div>\r\n            <article>\r\n                <h1>Local Environment Setup</h1>\r\n                <p>If you are still willing to set up your environment for Java programming language, then this section guides you on how to download and set up Java on your machine. Following are the steps to set up the environment.</p>\r\n                <p>Java SE is freely available from the link <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk12-downloads-5295953.html\" class=\"link\">Download Java.</a> You can download a version based on your operating system.</p>\r\n                <p>Follow the instructions to download Java and run the <b>.exe</b> to install Java on your machine. Once you installed Java on your machine, you will need to set environment variables to point to correct installation directories </p>\r\n                <h2>Setting Up the Path for Windows</h2>\r\n                <h4>Assuming you have installed Java in c:\\Program Files\\java\\jdk directory</h4>\r\n                <ul>\r\n                    <li><p>Right-click on 'My Computer' and select 'Properties'.</p></li>\r\n                    <li><p>Click the 'Environment variables' button under the 'Advanced' tab.</p></li>\r\n                    <li><p>Now, alter the 'Path' variable so that it also contains the path to the Java executable. Example, if the path is currently set to 'C:\\WINDOWS\\SYSTEM32', then change your path to read 'C:\\WINDOWS\\SYSTEM32;c:\\Program Files\\java\\jdk\\bin'.</p></li>\r\n                </ul>\r\n                <h2>Setting Up the Path for Linux, UNIX, Solaris, FreeBSD</h2>\r\n                <p>Environment variable PATH should be set to point to where the Java binaries have been installed. Refer to your shell documentation, if you have trouble doing this.</p>\r\n                <p>Example, if you use bash as your shell, then you would add the following line to the end of your '.bashrc: export PATH = /path/to/java:$PATH'</p>\r\n                <h3>Popular Java Editors</h3>\r\n                <p>To write your Java programs, you will need a text editor. There are even more sophisticated IDEs available in the market. But for now, you can consider one of the following</p>\r\n                <ul>\r\n                    <li><p><b>Notepad</b> − On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad.</p></li>\r\n                    <li><p><b>IntelliJ IDEA</b> − Java integrated development environment (IDE) for developing computer software. It can be downloaded from <a href=\"https://www.jetbrains.com/idea/download/#section=windows\" class=\"link\">https://www.jetbrains.com/idea/download/#section=windows</a></p></li>\r\n                    <li><p><b>Eclipse</b> − A Java IDE developed by the eclipse open-source community and can be downloaded from <a href=\"https://www.eclipse.org/\" class=\"link\">https://www.eclipse.org/</a></p></li>\r\n                </ul>\r\n            </article>\r\n        </div>\r\n    )\r\n}\r\nexport default EnvironmentSetup;","import React, { Component } from \"react\";\r\nimport \"../Technology.scss\";\r\nimport { NavLink, Switch, Route } from 'react-router-dom';\r\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\r\n\r\n import  Interfaces  from \"./data/Interfaces\";\r\n import  Encapsulation  from \"./data/Encapsulation\";\r\n import  EnvironmentSetup  from \"./data/EnvironmentSetup\";\r\n\r\nclass Java extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Java technology-container\">\r\n        <Tabs\r\n          vertical\r\n          onChange={tabId => {\r\n            console.log(tabId);\r\n          }}\r\n        >\r\n          <TabList>\r\n            <Tab tabFor=\"Interfaces\">\r\n              <NavLink to='/java'>\r\n                <h3>Java Object Oriented</h3>\r\n              </NavLink>\r\n            </Tab>\r\n            <Tab tabFor=\"JavaTutorial\">\r\n              <NavLink to='/java'>\r\n                <h3>Java Tutorial</h3>\r\n              </NavLink>\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanel tabId=\"Interfaces\">\r\n            <Switch>\r\n              <Route path=\"/java/interfaces\" component={Interfaces}></Route>\r\n              <Route path=\"/java/encapsulation\" component={Encapsulation}></Route>\r\n              <Route path=\"/java\">\r\n                <NavLink to='/java/interfaces'>\r\n                  <h2>Interfaces</h2>\r\n                </NavLink>\r\n                <NavLink to='/java/encapsulation'>\r\n                  <h2>Encapsulation</h2>\r\n                </NavLink>\r\n              </Route>\r\n            </Switch>\r\n          </TabPanel>\r\n          <TabPanel tabId=\"JavaTutorial\">\r\n            <Switch>\r\n              <Route path=\"/java/environment-setup\" component={EnvironmentSetup}></Route>\r\n              <Route path=\"/java\">\r\n                <NavLink to='/java/environment-setup'>\r\n                  <h2>Environment Setup</h2>\r\n                </NavLink>\r\n              </Route>\r\n            </Switch>\r\n          </TabPanel>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Java;\r\n","import React, { Component } from \"react\";\r\nimport \"../Technology.scss\";\r\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\r\n\r\nclass CSharp extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"CSharp technology-container\">\r\n        <Tabs\r\n          vertical\r\n          onChange={tabId => {\r\n            console.log(tabId);\r\n          }}\r\n        >\r\n          <TabList>\r\n            <Tab tabFor=\"Methods\">\r\n              <h3>C# Methods</h3>\r\n            </Tab>\r\n            <Tab tabFor=\"Interfaces\">\r\n              <h3>C# Interfaces </h3>\r\n            </Tab>\r\n            <Tab tabFor=\"Lambda\">\r\n              <h3>C# Lambda</h3>\r\n            </Tab>\r\n            <Tab tabFor=\"Generics\">\r\n              <h3>C# Generics</h3>\r\n            </Tab>\r\n            <Tab tabFor=\"Expression\">\r\n              <h3>C# Expression Trees</h3>\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanel tabId=\"Methods\">\r\n            <article>\r\n              <p>\r\n                A method is a code block that contains a series of statements. A\r\n                program causes the statements to be executed by calling the\r\n                method and specifying any required method arguments. In C#,\r\n                every executed instruction is performed in the context of a\r\n                method. The Main method is the entry point for every C#\r\n                application and it is called by the common language runtime\r\n                (CLR) when the program is started.\r\n              </p>\r\n              <h1>Method signatures</h1>\r\n              <p>Methods are declared in a class or struct by specifying:</p>\r\n              <ul>\r\n                <li>\r\n                  An optional access level, such as public or private. The\r\n                  default is private.\r\n                </li>\r\n                <li>Optional modifiers such as abstract or sealed.</li>\r\n                <li>The return value, or void if the method has none.</li>\r\n                <li>The method name.</li>\r\n                <li>\r\n                  Any method parameters. Method parameters are enclosed in\r\n                  parentheses and are separated by commas. Empty parentheses\r\n                  indicate that the method requires no parameters.\r\n                </li>\r\n              </ul>\r\n\r\n              <h1>Method invocation</h1>\r\n              <p>\r\n                Methods can be either instance or static. Invoking an instance\r\n                method requires that you instantiate an object and call the\r\n                method on that object; an instance method operates on that\r\n                instance and its data. You invoke a static method by referencing\r\n                the name of the type to which the method belongs; static methods\r\n                do not operate on instance data. Attempting to call a static\r\n                method through an object instance generates a compiler error.\r\n                Calling a method is like accessing a field. After the object\r\n                name (if you are calling an instance method) or the type name\r\n                (if you are calling a static method), add a period, the name of\r\n                the method, and parentheses. Arguments are listed within the\r\n                parentheses, and are separated by commas. The method definition\r\n                specifies the names and types of any parameters that are\r\n                required. When a caller invokes the method, it provides concrete\r\n                values, called arguments, for each parameter. The arguments must\r\n                be compatible with the parameter type, but the argument name, if\r\n                one is used in the calling code, does not have to be the same as\r\n                the parameter named defined in the method. In the following\r\n                example, the Square method includes a single parameter of type\r\n                int named i. The first method call passes the Square method a\r\n                variable of type int named num; the second, a numeric constant;\r\n                and the third, an expression.\r\n              </p>\r\n            </article>\r\n          </TabPanel>\r\n          <TabPanel tabId=\"Interfaces\">\r\n            <article>\r\n              <p>\r\n                An interface contains definitions for a group of related\r\n                functionalities that a class or a struct can implement. By using\r\n                interfaces, you can, for example, include behavior from multiple\r\n                sources in a class. That capability is important in C# because\r\n                the language doesn't support multiple inheritance of classes. In\r\n                addition, you must use an interface if you want to simulate\r\n                inheritance for structs, because they can't actually inherit\r\n                from another struct or class. You define an interface by using\r\n                the interface keyword. as the following example shows.\r\n              </p>\r\n              <p>\r\n                The name of the struct must be a valid C# identifier name. By\r\n                convention, interface names begin with a capital I. Any class or\r\n                struct that implements the IEquatable interface must contain a\r\n                definition for an Equals method that matches the signature that\r\n                the interface specifies. As a result, you can count on a class\r\n                that implements IEquatable to contain an Equals method with\r\n                which an instance of the class can determine whether it's equal\r\n                to another instance of the same class. The definition of\r\n                IEquatable doesn’t provide an implementation for Equals. The\r\n                interface defines only the signature. In that way, an interface\r\n                in C# is similar to an abstract class in which all the methods\r\n                are abstract. However, a class or struct can implement multiple\r\n                interfaces, but a class can inherit only a single class,\r\n                abstract or not. For more information about abstract classes,\r\n                see Abstract and Sealed Classes and Class Members. Interfaces\r\n                can contain methods, properties, events, indexers, or any\r\n                combination of those four member types. For links to examples,\r\n                see Related Sections. An interface can't contain constants,\r\n                fields, operators, instance constructors, finalizers, or types.\r\n                Interface members are automatically public, and they can't\r\n                include any access modifiers. Members also can't be static.\r\n              </p>\r\n\r\n              <h1>Interfaces summary</h1>\r\n              <p>An interface has the following properties:</p>\r\n              <ul>\r\n                <li>\r\n                  An interface is like an abstract base class with only abstract\r\n                  members. Any class or struct that implements the interface\r\n                  must implement all its members.\r\n                </li>\r\n                <li>\r\n                  An interface can't be instantiated directly. Its members are\r\n                  implemented by any class or struct that implements the\r\n                  interface.\r\n                </li>\r\n                <li>\r\n                  Interfaces can contain events, indexers, methods, and\r\n                  properties.\r\n                </li>\r\n                <li>Interfaces contain no implementation of methods.</li>\r\n                <li>\r\n                  A class or struct can implement multiple interfaces. A class\r\n                  can inherit a base class and also implement one or more\r\n                  interfaces.\r\n                </li>\r\n              </ul>\r\n            </article>\r\n          </TabPanel>\r\n          <TabPanel tabId=\"Lambda\">\r\n            <article>\r\n              <p>\r\n                Use the lambda declaration operator => to separate the lambda's\r\n                parameter list from its body. To create a lambda expression, you\r\n                specify input parameters (if any) on the left side of the lambda\r\n                operator and an expression or a statement block on the other\r\n                side. Any lambda expression can be converted to a delegate type.\r\n                The delegate type to which a lambda expression can be converted\r\n                is defined by the types of its parameters and return value. If a\r\n                lambda expression doesn't return a value, it can be converted to\r\n                one of the Action delegate types; otherwise, it can be converted\r\n                to one of the Func delegate types. For example, a lambda\r\n                expression that has two parameters and returns no value can be\r\n                converted to an Action delegate. A lambda expression that has\r\n                one parameter and returns a value can be converted to a Func\r\n                delegate. In the following example, the lambda expression x => x\r\n                * x, which specifies a parameter that’s named x and returns the\r\n                value of x squared, is assigned to a variable of a delegate type\r\n              </p>\r\n            </article>\r\n          </TabPanel>\r\n          <TabPanel tabId=\"Generics\">\r\n            <article>\r\n              <p>\r\n                Generics were added to version 2.0 of the C# language and the\r\n                common language runtime (CLR). Generics introduce to the .NET\r\n                Framework the concept of type parameters, which make it possible\r\n                to design classes and methods that defer the specification of\r\n                one or more types until the class or method is declared and\r\n                instantiated by client code. For example, by using a generic\r\n                type parameter T you can write a single class that other client\r\n                code can use without incurring the cost or risk of runtime casts\r\n                or boxing operations, as shown here:\r\n              </p>\r\n              <p>\r\n                Generic classes and methods combine reusability, type safety and\r\n                efficiency in a way that their non-generic counterparts cannot.\r\n                Generics are most frequently used with collections and the\r\n                methods that operate on them. Version 2.0 of the .NET Framework\r\n                class library provides a new namespace,\r\n                System.Collections.Generic, which contains several new\r\n                generic-based collection classes. It is recommended that all\r\n                applications that target the .NET Framework 2.0 and later use\r\n                the new generic collection classes instead of the older\r\n                non-generic counterparts such as ArrayList. For more\r\n                information, see Generics in .NET. As the type of a method\r\n                parameter in the AddHead method. As the return type of the Data\r\n                property in the nested Node class. As the type of the private\r\n                member data in the nested class.\r\n              </p>\r\n            </article>\r\n          </TabPanel>\r\n          <TabPanel tabId=\"Expression\">\r\n            <article>\r\n              <p>\r\n                If you have used LINQ, you have experience with a rich library\r\n                where the Func types are part of the API set. (If you are not\r\n                familiar with LINQ, you probably want to read the LINQ tutorial\r\n                and the article about lambda expressions before this one.)\r\n                Expression Trees provide richer interaction with the arguments\r\n                that are functions. You write function arguments, typically\r\n                using Lambda Expressions, when you create LINQ queries. In a\r\n                typical LINQ query, those function arguments are transformed\r\n                into a delegate the compiler creates. When you want to have a\r\n                richer interaction, you need to use Expression Trees. Expression\r\n                Trees represent code as a structure that you can examine,\r\n                modify, or execute. These tools give you the power to manipulate\r\n                code during run time. You can write code that examines running\r\n                algorithms, or injects new capabilities. In more advanced\r\n                scenarios, you can modify running algorithms, and even translate\r\n                C# expressions into another form for execution in another\r\n                environment. You've likely already written code that uses\r\n                Expression Trees. Entity Framework's LINQ APIs accept Expression\r\n                Trees as the arguments for the LINQ Query Expression Pattern.\r\n                That enables Entity Framework to translate the query you wrote\r\n                in C# into SQL that executes in the database engine. Another\r\n                example is Moq, which is a popular mocking framework for .NET.\r\n                The remaining sections of this tutorial will explore what\r\n                Expression Trees are, examine the framework classes that support\r\n                expression trees, and show you how to work with expression\r\n                trees. You'll learn how to read expression trees, how to create\r\n                expression trees, how to create modified expression trees, and\r\n                how to execute the code represented by expression trees. After\r\n                reading, you will be ready to use these structures to create\r\n                rich adaptive algorithms.\r\n              </p>\r\n            </article>\r\n          </TabPanel>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CSharp;\r\n","import React from \"react\";\r\n\r\nfunction Node() {\r\n  return (\r\n    <div>\r\n      <h1>What is Node.js?</h1>\r\n      <ul>\r\n        <li>Server-side JavaScript runtime</li>\r\n        <li>Chrome V8 JavaScript engine</li>\r\n        <li>NPM package manager</li>\r\n        <li>Install node packages</li>\r\n      </ul>\r\n\r\n      <h1>Configurations</h1>\r\n      <ul>\r\n        <li>Set up ECMAScript 6 and Node.js</li>\r\n        <li>ECMAScript6 is a standard for JavaScript</li>\r\n        <li>Node is environment for JavaScript</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\n\r\nfunction Functions() {\r\n  return (\r\n    <div>\r\n      <h1>Functions in JavaScript</h1>\r\n      <p>\r\n        In order to solve different problems, we are going to use functions and\r\n        the input will come as parameters A function is block of code, that\r\n        executes when called\r\n      </p>\r\n\r\n      <iframe\r\n        height=\"300px\"\r\n        width=\"90%\"\r\n        src=\"https://repl.it/repls/DazzlingImpurePasswords?lite=true\"\r\n        scrolling=\"no\"\r\n        frameborder=\"no\"\r\n        allowtransparency=\"true\"\r\n        allowfullscreen=\"true\"\r\n        sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Functions;\r\n","import React from \"react\";\r\n\r\nfunction Functions() {\r\n  return (\r\n    <div>\r\n      <h2>What is Conditional Statement?</h2>\r\n      <p>The if-else statement:</p>\r\n      <ul>\r\n        <li>Do action depending on condition</li>\r\n        <li>You can chain conditions</li>\r\n      </ul>\r\n      <iframe\r\n        height=\"500px\"\r\n        width=\"90%\"\r\n        src=\"https://repl.it/repls/MintyIrresponsibleVendor?lite=true\"\r\n        scrolling=\"no\"\r\n        frameborder=\"no\"\r\n        allowtransparency=\"true\"\r\n        allowfullscreen=\"true\"\r\n        sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Functions;\r\n","import React from \"react\";\r\n\r\nfunction Loops() {\r\n  return (\r\n    <div>\r\n      <h1>\r\n        The{\" \"}\r\n        <em>\r\n          <strong>for</strong>\r\n        </em>{\" \"}\r\n        loop:\r\n      </h1>\r\n      <ul>\r\n        <li>Repeats until the condition is evaluated</li>\r\n      </ul>\r\n      <iframe\r\n        height=\"300px\"\r\n        width=\"90%\"\r\n        src=\"https://repl.it/repls/PrimaryUnconsciousServerapplication?lite=true\"\r\n        scrolling=\"no\"\r\n        frameborder=\"no\"\r\n        allowtransparency=\"true\"\r\n        allowfullscreen=\"true\"\r\n        sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\r\n      ></iframe>\r\n      <h1>\r\n        The{\" \"}\r\n        <em>\r\n          <strong>while</strong>\r\n        </em>{\" \"}\r\n        loop:\r\n      </h1>\r\n      <ul>\r\n        <li>Does the same, but has different structure</li>\r\n      </ul>\r\n      <iframe\r\n        height=\"300px\"\r\n        width=\"90%\"\r\n        src=\"https://repl.it/repls/MajorSingleScreenscraper?lite=true\"\r\n        scrolling=\"no\"\r\n        frameborder=\"no\"\r\n        allowtransparency=\"true\"\r\n        allowfullscreen=\"true\"\r\n        sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loops;\r\n","import React, { Component } from \"react\";\r\nimport { Tabs, Tab, TabPanel, TabList } from \"react-web-tabs\";\r\nimport { NavLink, Switch, Route } from \"react-router-dom\";\r\nimport \"../Technology.scss\";\r\n\r\nimport NodeJS from \"./data/NodeJS.js\";\r\nimport Functions from \"./data/Functions.js\";\r\nimport ConditionalStatements from \"./data/ConditionalStatements.js\";\r\nimport Loops from \"./data/Loops.js\";\r\n\r\nclass JavaScript extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"JavaScript technology-container\">\r\n        <Tabs\r\n          vertical\r\n          onChange={tabId => {\r\n            console.log(tabId);\r\n          }}\r\n        >\r\n          <TabList>\r\n            <Tab tabFor=\"Syntax\">\r\n              <h3>JavaScript Syntax</h3>\r\n            </Tab>\r\n            <Tab tabFor=\"DataTypes\">\r\n              <h3>Data Types</h3>\r\n            </Tab>\r\n            <Tab tabFor=\"Variables\">\r\n              <h3>Variables</h3>\r\n            </Tab>\r\n            <Tab tabFor=\"Arrays\">\r\n              <h3>Arrays</h3>\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanel tabId=\"Syntax\">\r\n            <Switch>\r\n              <Route path=\"/javascript/nodejs\" component={NodeJS}></Route>\r\n              <Route path=\"/javascript/functions\" component={Functions}></Route>\r\n              <Route\r\n                path=\"/javascript/conditional-statements\"\r\n                component={ConditionalStatements}\r\n              ></Route>\r\n              <Route path=\"/javascript/loops\" component={Loops}></Route>\r\n\r\n              <Route path=\"/javascript\">\r\n                <NavLink to=\"/javascript/nodejs\">\r\n                  <h2>Node.js</h2>\r\n                </NavLink>\r\n                <NavLink to=\"/javascript/functions\">\r\n                  <h2>Functions</h2>\r\n                </NavLink>\r\n                <NavLink to=\"/javascript/conditional-statements\">\r\n                  <h2>Conditional Statements</h2>\r\n                </NavLink>\r\n                <NavLink to=\"/javascript/loops\">\r\n                  <h2>Loops</h2>\r\n                </NavLink>\r\n              </Route>\r\n            </Switch>\r\n          </TabPanel>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JavaScript;\r\n","import React from \"react\";\r\nimport \"./Navigation.scss\";\r\n\r\nimport { Switch, Route, NavLink } from \"react-router-dom\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Python from \"../../Technologies/Python/Python.js\";\r\nimport Java from \"../../Technologies/Java/Java.js\";\r\nimport CSharp from \"../../Technologies/CSharp/CSharp.js\";\r\nimport JavaScript from \"../../Technologies/JavaScript/JavaScript.js\";\r\n\r\nfunction Navigation() {\r\n  const faHomeIcon = <FontAwesomeIcon icon={faHome} />;\r\n  const faSearchIcon = <FontAwesomeIcon icon={faSearch} />;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Navigation\">\r\n        <div className=\"menu-container\">\r\n          <div className=\"menu-items\">\r\n            <NavLink to=\"/csharp\">\r\n              <span>{faHomeIcon}</span>\r\n            </NavLink>\r\n            <NavLink to=\"/csharp\" activeClassName=\"active\">\r\n              C#\r\n            </NavLink>\r\n\r\n            <NavLink activeClassName=\"active\" to=\"/javascript\">\r\n              JavaScript\r\n            </NavLink>\r\n\r\n            <NavLink activeClassName=\"active\" to=\"/java\">\r\n              Java\r\n            </NavLink>\r\n\r\n            <NavLink activeClassName=\"active\" to=\"/python\">\r\n              Python\r\n            </NavLink>\r\n          </div>\r\n\r\n          <div className=\"search-bar\">\r\n            <span>{faSearchIcon}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Switch>\r\n        <Route path=\"/csharp\" component={CSharp}></Route>\r\n        <Route path=\"/javascript\" component={JavaScript}></Route>\r\n        <Route path=\"/java\" component={Java}></Route>\r\n        <Route path=\"/python\" component={Python}></Route>\r\n        <Route path=\"/\" component={CSharp}></Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Footer from \"./Components/Common/Footer/Footer.js\";\r\nimport Header from \"./Components/Common/Header/Header.js\";\r\nimport Navigation from \"./Components/Common/Navigation/Navigation\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Header></Header>\r\n        <Navigation></Navigation>\r\n        <Footer></Footer>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}